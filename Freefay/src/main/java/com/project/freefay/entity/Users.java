package com.project.freefay.entity;

// Generated Dec 23, 2015 6:18:07 AM by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Users generated by hbm2java
 */
@Entity
@Table(name = "users", catalog = "freefay", uniqueConstraints = @UniqueConstraint(columnNames = "email_id"))
public class Users implements java.io.Serializable {

	private UsersId id;
	private Regions regions;
	private Countries countries;
	private Cities cities;
	private String password;
	private byte enabled;
	private String firstName;
	private String lastName;
	private String contactNo;
	private String emailId;
	private String gender;
	private int active;
	private int blocked;
	private int verified;
	private String dob;
	private Date date;
	private Date time;
	private String postalCode;
	private String address;
	private Set<Tips> tipsesForFkTipsUsers1 = new HashSet<Tips>(0);
	private Set<Tips> tipsesForFkTipsUsers2 = new HashSet<Tips>(0);
	private Set<SubCategory> subCategories = new HashSet<SubCategory>(0);
	private Set<UserSubscription> userSubscriptions = new HashSet<UserSubscription>(
			0);
	private Set<UserExperience> userExperiences = new HashSet<UserExperience>(0);
	private Set<Authorities> authoritieses = new HashSet<Authorities>(0);
	private Set<Attachments> attachmentses = new HashSet<Attachments>(0);
	private Set<Ratings> ratingsesForFkRatingsUsers2 = new HashSet<Ratings>(0);
	private Set<Requests> requestses = new HashSet<Requests>(0);
	private Set<Views> viewses = new HashSet<Views>(0);
	private Set<PaymentCharges> paymentChargeses = new HashSet<PaymentCharges>(
			0);
	private Set<Ratings> ratingsesForFkRatingsUsers1 = new HashSet<Ratings>(0);
	private Set<PaymentOptions> paymentOptionses = new HashSet<PaymentOptions>(
			0);
	private Set<Category> categories = new HashSet<Category>(0);
	private Set<Portfolio> portfolios = new HashSet<Portfolio>(0);
	private Set<Fields> fieldses = new HashSet<Fields>(0);
	private Set<CompanyNotification> companyNotifications = new HashSet<CompanyNotification>(
			0);
	private Set<UserDuration> userDurations = new HashSet<UserDuration>(0);
	private Set<JobDetails> jobDetailsesForFkJobDetailsUsers2 = new HashSet<JobDetails>(
			0);
	private Set<JobDetails> jobDetailsesForFkJobDetailsUsers1 = new HashSet<JobDetails>(
			0);
	private Set<Payment> paymentsForFkPaymentUsers1 = new HashSet<Payment>(0);
	private Set<Payment> paymentsForFkPaymentUsers2 = new HashSet<Payment>(0);
	private Set<Search> searches = new HashSet<Search>(0);
	private Set<Subscription> subscriptions = new HashSet<Subscription>(0);
	private Set<MessageHeads> messageHeadsesForFkMessageHeadsUsers2 = new HashSet<MessageHeads>(
			0);
	private Set<Services> serviceses = new HashSet<Services>(0);
	private Set<Donations> donationses = new HashSet<Donations>(0);
	private Set<MessageHeads> messageHeadsesForFkMessageHeadsUsers1 = new HashSet<MessageHeads>(
			0);
	private Set<CountryRestrictions> countryRestrictionses = new HashSet<CountryRestrictions>(
			0);

	public Users() {
	}

	public Users(UsersId id, Regions regions, Countries countries,
			Cities cities, String password, byte enabled, String firstName,
			String lastName, String contactNo, String emailId, String gender,
			int active, int blocked, int verified, String dob, Date date,
			Date time, String postalCode, String address) {
		this.id = id;
		this.regions = regions;
		this.countries = countries;
		this.cities = cities;
		this.password = password;
		this.enabled = enabled;
		this.firstName = firstName;
		this.lastName = lastName;
		this.contactNo = contactNo;
		this.emailId = emailId;
		this.gender = gender;
		this.active = active;
		this.blocked = blocked;
		this.verified = verified;
		this.dob = dob;
		this.date = date;
		this.time = time;
		this.postalCode = postalCode;
		this.address = address;
	}

	public Users(UsersId id, Regions regions, Countries countries,
			Cities cities, String password, byte enabled, String firstName,
			String lastName, String contactNo, String emailId, String gender,
			int active, int blocked, int verified, String dob, Date date,
			Date time, String postalCode, String address,
			Set<Tips> tipsesForFkTipsUsers1, Set<Tips> tipsesForFkTipsUsers2,
			Set<SubCategory> subCategories,
			Set<UserSubscription> userSubscriptions,
			Set<UserExperience> userExperiences,
			Set<Authorities> authoritieses, Set<Attachments> attachmentses,
			Set<Ratings> ratingsesForFkRatingsUsers2, Set<Requests> requestses,
			Set<Views> viewses, Set<PaymentCharges> paymentChargeses,
			Set<Ratings> ratingsesForFkRatingsUsers1,
			Set<PaymentOptions> paymentOptionses, Set<Category> categories,
			Set<Portfolio> portfolios, Set<Fields> fieldses,
			Set<CompanyNotification> companyNotifications,
			Set<UserDuration> userDurations,
			Set<JobDetails> jobDetailsesForFkJobDetailsUsers2,
			Set<JobDetails> jobDetailsesForFkJobDetailsUsers1,
			Set<Payment> paymentsForFkPaymentUsers1,
			Set<Payment> paymentsForFkPaymentUsers2, Set<Search> searches,
			Set<Subscription> subscriptions,
			Set<MessageHeads> messageHeadsesForFkMessageHeadsUsers2,
			Set<Services> serviceses, Set<Donations> donationses,
			Set<MessageHeads> messageHeadsesForFkMessageHeadsUsers1,
			Set<CountryRestrictions> countryRestrictionses) {
		this.id = id;
		this.regions = regions;
		this.countries = countries;
		this.cities = cities;
		this.password = password;
		this.enabled = enabled;
		this.firstName = firstName;
		this.lastName = lastName;
		this.contactNo = contactNo;
		this.emailId = emailId;
		this.gender = gender;
		this.active = active;
		this.blocked = blocked;
		this.verified = verified;
		this.dob = dob;
		this.date = date;
		this.time = time;
		this.postalCode = postalCode;
		this.address = address;
		this.tipsesForFkTipsUsers1 = tipsesForFkTipsUsers1;
		this.tipsesForFkTipsUsers2 = tipsesForFkTipsUsers2;
		this.subCategories = subCategories;
		this.userSubscriptions = userSubscriptions;
		this.userExperiences = userExperiences;
		this.authoritieses = authoritieses;
		this.attachmentses = attachmentses;
		this.ratingsesForFkRatingsUsers2 = ratingsesForFkRatingsUsers2;
		this.requestses = requestses;
		this.viewses = viewses;
		this.paymentChargeses = paymentChargeses;
		this.ratingsesForFkRatingsUsers1 = ratingsesForFkRatingsUsers1;
		this.paymentOptionses = paymentOptionses;
		this.categories = categories;
		this.portfolios = portfolios;
		this.fieldses = fieldses;
		this.companyNotifications = companyNotifications;
		this.userDurations = userDurations;
		this.jobDetailsesForFkJobDetailsUsers2 = jobDetailsesForFkJobDetailsUsers2;
		this.jobDetailsesForFkJobDetailsUsers1 = jobDetailsesForFkJobDetailsUsers1;
		this.paymentsForFkPaymentUsers1 = paymentsForFkPaymentUsers1;
		this.paymentsForFkPaymentUsers2 = paymentsForFkPaymentUsers2;
		this.searches = searches;
		this.subscriptions = subscriptions;
		this.messageHeadsesForFkMessageHeadsUsers2 = messageHeadsesForFkMessageHeadsUsers2;
		this.serviceses = serviceses;
		this.donationses = donationses;
		this.messageHeadsesForFkMessageHeadsUsers1 = messageHeadsesForFkMessageHeadsUsers1;
		this.countryRestrictionses = countryRestrictionses;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "usersId", column = @Column(name = "users_id", nullable = false)),
			@AttributeOverride(name = "username", column = @Column(name = "username", nullable = false, length = 45)) })
	public UsersId getId() {
		return this.id;
	}

	public void setId(UsersId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id", nullable = false)
	public Regions getRegions() {
		return this.regions;
	}

	public void setRegions(Regions regions) {
		this.regions = regions;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "countries_id", nullable = false)
	public Countries getCountries() {
		return this.countries;
	}

	public void setCountries(Countries countries) {
		this.countries = countries;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "cities_id", nullable = false)
	public Cities getCities() {
		return this.cities;
	}

	public void setCities(Cities cities) {
		this.cities = cities;
	}

	@Column(name = "password", nullable = false, length = 45)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "enabled", nullable = false)
	public byte getEnabled() {
		return this.enabled;
	}

	public void setEnabled(byte enabled) {
		this.enabled = enabled;
	}

	@Column(name = "first_name", nullable = false, length = 45)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "last_name", nullable = false, length = 45)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "contact_no", nullable = false, length = 45)
	public String getContactNo() {
		return this.contactNo;
	}

	public void setContactNo(String contactNo) {
		this.contactNo = contactNo;
	}

	@Column(name = "email_id", unique = true, nullable = false, length = 45)
	public String getEmailId() {
		return this.emailId;
	}

	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}

	@Column(name = "Gender", nullable = false, length = 6)
	public String getGender() {
		return this.gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	@Column(name = "Active", nullable = false)
	public int getActive() {
		return this.active;
	}

	public void setActive(int active) {
		this.active = active;
	}

	@Column(name = "blocked", nullable = false)
	public int getBlocked() {
		return this.blocked;
	}

	public void setBlocked(int blocked) {
		this.blocked = blocked;
	}

	@Column(name = "verified", nullable = false)
	public int getVerified() {
		return this.verified;
	}

	public void setVerified(int verified) {
		this.verified = verified;
	}

	@Column(name = "dob", nullable = false, length = 45)
	public String getDob() {
		return this.dob;
	}

	public void setDob(String dob) {
		this.dob = dob;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "date", nullable = false, length = 10)
	public Date getDate() {
		return this.date;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	@Temporal(TemporalType.TIME)
	@Column(name = "time", nullable = false, length = 8)
	public Date getTime() {
		return this.time;
	}

	public void setTime(Date time) {
		this.time = time;
	}

	@Column(name = "postal_code", nullable = false, length = 15)
	public String getPostalCode() {
		return this.postalCode;
	}

	public void setPostalCode(String postalCode) {
		this.postalCode = postalCode;
	}

	@Column(name = "address", nullable = false, length = 400)
	public String getAddress() {
		return this.address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByFkTipsUsers1")
	public Set<Tips> getTipsesForFkTipsUsers1() {
		return this.tipsesForFkTipsUsers1;
	}

	public void setTipsesForFkTipsUsers1(Set<Tips> tipsesForFkTipsUsers1) {
		this.tipsesForFkTipsUsers1 = tipsesForFkTipsUsers1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByFkTipsUsers2")
	public Set<Tips> getTipsesForFkTipsUsers2() {
		return this.tipsesForFkTipsUsers2;
	}

	public void setTipsesForFkTipsUsers2(Set<Tips> tipsesForFkTipsUsers2) {
		this.tipsesForFkTipsUsers2 = tipsesForFkTipsUsers2;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<SubCategory> getSubCategories() {
		return this.subCategories;
	}

	public void setSubCategories(Set<SubCategory> subCategories) {
		this.subCategories = subCategories;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<UserSubscription> getUserSubscriptions() {
		return this.userSubscriptions;
	}

	public void setUserSubscriptions(Set<UserSubscription> userSubscriptions) {
		this.userSubscriptions = userSubscriptions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<UserExperience> getUserExperiences() {
		return this.userExperiences;
	}

	public void setUserExperiences(Set<UserExperience> userExperiences) {
		this.userExperiences = userExperiences;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Authorities> getAuthoritieses() {
		return this.authoritieses;
	}

	public void setAuthoritieses(Set<Authorities> authoritieses) {
		this.authoritieses = authoritieses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Attachments> getAttachmentses() {
		return this.attachmentses;
	}

	public void setAttachmentses(Set<Attachments> attachmentses) {
		this.attachmentses = attachmentses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByFkRatingsUsers2")
	public Set<Ratings> getRatingsesForFkRatingsUsers2() {
		return this.ratingsesForFkRatingsUsers2;
	}

	public void setRatingsesForFkRatingsUsers2(
			Set<Ratings> ratingsesForFkRatingsUsers2) {
		this.ratingsesForFkRatingsUsers2 = ratingsesForFkRatingsUsers2;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Requests> getRequestses() {
		return this.requestses;
	}

	public void setRequestses(Set<Requests> requestses) {
		this.requestses = requestses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Views> getViewses() {
		return this.viewses;
	}

	public void setViewses(Set<Views> viewses) {
		this.viewses = viewses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<PaymentCharges> getPaymentChargeses() {
		return this.paymentChargeses;
	}

	public void setPaymentChargeses(Set<PaymentCharges> paymentChargeses) {
		this.paymentChargeses = paymentChargeses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByFkRatingsUsers1")
	public Set<Ratings> getRatingsesForFkRatingsUsers1() {
		return this.ratingsesForFkRatingsUsers1;
	}

	public void setRatingsesForFkRatingsUsers1(
			Set<Ratings> ratingsesForFkRatingsUsers1) {
		this.ratingsesForFkRatingsUsers1 = ratingsesForFkRatingsUsers1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<PaymentOptions> getPaymentOptionses() {
		return this.paymentOptionses;
	}

	public void setPaymentOptionses(Set<PaymentOptions> paymentOptionses) {
		this.paymentOptionses = paymentOptionses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Category> getCategories() {
		return this.categories;
	}

	public void setCategories(Set<Category> categories) {
		this.categories = categories;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "users")
	public Set<Portfolio> getPortfolios() {
		return this.portfolios;
	}

	public void setPortfolios(Set<Portfolio> portfolios) {
		this.portfolios = portfolios;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Fields> getFieldses() {
		return this.fieldses;
	}

	public void setFieldses(Set<Fields> fieldses) {
		this.fieldses = fieldses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<CompanyNotification> getCompanyNotifications() {
		return this.companyNotifications;
	}

	public void setCompanyNotifications(
			Set<CompanyNotification> companyNotifications) {
		this.companyNotifications = companyNotifications;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<UserDuration> getUserDurations() {
		return this.userDurations;
	}

	public void setUserDurations(Set<UserDuration> userDurations) {
		this.userDurations = userDurations;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByFkJobDetailsUsers2")
	public Set<JobDetails> getJobDetailsesForFkJobDetailsUsers2() {
		return this.jobDetailsesForFkJobDetailsUsers2;
	}

	public void setJobDetailsesForFkJobDetailsUsers2(
			Set<JobDetails> jobDetailsesForFkJobDetailsUsers2) {
		this.jobDetailsesForFkJobDetailsUsers2 = jobDetailsesForFkJobDetailsUsers2;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByFkJobDetailsUsers1")
	public Set<JobDetails> getJobDetailsesForFkJobDetailsUsers1() {
		return this.jobDetailsesForFkJobDetailsUsers1;
	}

	public void setJobDetailsesForFkJobDetailsUsers1(
			Set<JobDetails> jobDetailsesForFkJobDetailsUsers1) {
		this.jobDetailsesForFkJobDetailsUsers1 = jobDetailsesForFkJobDetailsUsers1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByFkPaymentUsers1")
	public Set<Payment> getPaymentsForFkPaymentUsers1() {
		return this.paymentsForFkPaymentUsers1;
	}

	public void setPaymentsForFkPaymentUsers1(
			Set<Payment> paymentsForFkPaymentUsers1) {
		this.paymentsForFkPaymentUsers1 = paymentsForFkPaymentUsers1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByFkPaymentUsers2")
	public Set<Payment> getPaymentsForFkPaymentUsers2() {
		return this.paymentsForFkPaymentUsers2;
	}

	public void setPaymentsForFkPaymentUsers2(
			Set<Payment> paymentsForFkPaymentUsers2) {
		this.paymentsForFkPaymentUsers2 = paymentsForFkPaymentUsers2;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Search> getSearches() {
		return this.searches;
	}

	public void setSearches(Set<Search> searches) {
		this.searches = searches;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Subscription> getSubscriptions() {
		return this.subscriptions;
	}

	public void setSubscriptions(Set<Subscription> subscriptions) {
		this.subscriptions = subscriptions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByFkMessageHeadsUsers2")
	public Set<MessageHeads> getMessageHeadsesForFkMessageHeadsUsers2() {
		return this.messageHeadsesForFkMessageHeadsUsers2;
	}

	public void setMessageHeadsesForFkMessageHeadsUsers2(
			Set<MessageHeads> messageHeadsesForFkMessageHeadsUsers2) {
		this.messageHeadsesForFkMessageHeadsUsers2 = messageHeadsesForFkMessageHeadsUsers2;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Services> getServiceses() {
		return this.serviceses;
	}

	public void setServiceses(Set<Services> serviceses) {
		this.serviceses = serviceses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Donations> getDonationses() {
		return this.donationses;
	}

	public void setDonationses(Set<Donations> donationses) {
		this.donationses = donationses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByFkMessageHeadsUsers1")
	public Set<MessageHeads> getMessageHeadsesForFkMessageHeadsUsers1() {
		return this.messageHeadsesForFkMessageHeadsUsers1;
	}

	public void setMessageHeadsesForFkMessageHeadsUsers1(
			Set<MessageHeads> messageHeadsesForFkMessageHeadsUsers1) {
		this.messageHeadsesForFkMessageHeadsUsers1 = messageHeadsesForFkMessageHeadsUsers1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<CountryRestrictions> getCountryRestrictionses() {
		return this.countryRestrictionses;
	}

	public void setCountryRestrictionses(
			Set<CountryRestrictions> countryRestrictionses) {
		this.countryRestrictionses = countryRestrictionses;
	}

}

package com.project.freefay.entity;

// Generated Dec 23, 2015 6:18:07 AM by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * JobDetails generated by hbm2java
 */
@Entity
@Table(name = "job_details", catalog = "freefay")
public class JobDetails implements java.io.Serializable {

	private Long jobDetailsId;
	private Users usersByFkJobDetailsUsers1;
	private Portfolio portfolioByProviderPortfolioId;
	private MessageHeads messageHeads;
	private Users usersByFkJobDetailsUsers2;
	private Portfolio portfolioByRequesteePortfolioId;
	private Date startingDate;
	private Date startingTime;
	private Date endingDate;
	private Date endingTime;
	private double rate;
	private int cancelled;
	private int blocked;
	private int issues;
	private int paymentCleared;
	private int active;
	private int orders;
	private Long totalAmount;
	private Set<Tips> tipses = new HashSet<Tips>(0);
	private Set<Payment> payments = new HashSet<Payment>(0);
	private Set<Donations> donationses = new HashSet<Donations>(0);

	public JobDetails() {
	}

	public JobDetails(Users usersByFkJobDetailsUsers1,
			Portfolio portfolioByProviderPortfolioId,
			MessageHeads messageHeads, Users usersByFkJobDetailsUsers2,
			Portfolio portfolioByRequesteePortfolioId, Date startingDate,
			Date startingTime, Date endingDate, Date endingTime, double rate,
			int cancelled, int blocked, int issues, int paymentCleared,
			int active, int orders, Long totalAmount) {
		this.usersByFkJobDetailsUsers1 = usersByFkJobDetailsUsers1;
		this.portfolioByProviderPortfolioId = portfolioByProviderPortfolioId;
		this.messageHeads = messageHeads;
		this.usersByFkJobDetailsUsers2 = usersByFkJobDetailsUsers2;
		this.portfolioByRequesteePortfolioId = portfolioByRequesteePortfolioId;
		this.startingDate = startingDate;
		this.startingTime = startingTime;
		this.endingDate = endingDate;
		this.endingTime = endingTime;

		this.rate = rate;
		this.cancelled = cancelled;
		this.blocked = blocked;
		this.issues = issues;
		this.paymentCleared = paymentCleared;
		this.active = active;
		this.orders = orders;
		this.totalAmount = totalAmount;
	}

	public JobDetails(Users usersByFkJobDetailsUsers1,
			Portfolio portfolioByProviderPortfolioId,
			MessageHeads messageHeads, Users usersByFkJobDetailsUsers2,
			Portfolio portfolioByRequesteePortfolioId, Date startingDate,
			Date startingTime, Date endingDate, Date endingTime, double rate,
			int cancelled, int blocked, int issues, int active, int orders,
			Long totalAmount, int paymentCleared, Set<Tips> tipses,
			Set<Payment> payments, Set<Donations> donationses) {
		this.usersByFkJobDetailsUsers1 = usersByFkJobDetailsUsers1;
		this.portfolioByProviderPortfolioId = portfolioByProviderPortfolioId;
		this.messageHeads = messageHeads;
		this.usersByFkJobDetailsUsers2 = usersByFkJobDetailsUsers2;
		this.portfolioByRequesteePortfolioId = portfolioByRequesteePortfolioId;
		this.startingDate = startingDate;
		this.startingTime = startingTime;
		this.endingDate = endingDate;
		this.endingTime = endingTime;
		this.rate = rate;
		this.cancelled = cancelled;
		this.blocked = blocked;
		this.issues = issues;
		this.paymentCleared = paymentCleared;
		this.tipses = tipses;
		this.payments = payments;
		this.donationses = donationses;
		this.active = active;
		this.orders = orders;
		this.totalAmount = totalAmount;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "job_details_id", unique = true, nullable = false)
	public Long getJobDetailsId() {
		return this.jobDetailsId;
	}

	public void setJobDetailsId(Long jobDetailsId) {
		this.jobDetailsId = jobDetailsId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "requestee_users_id", referencedColumnName = "users_id", nullable = false),
			@JoinColumn(name = "requestee_username", referencedColumnName = "username", nullable = false) })
	public Users getUsersByFkJobDetailsUsers1() {
		return this.usersByFkJobDetailsUsers1;
	}

	public void setUsersByFkJobDetailsUsers1(Users usersByFkJobDetailsUsers1) {
		this.usersByFkJobDetailsUsers1 = usersByFkJobDetailsUsers1;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "provider_portfolio_id", nullable = false)
	public Portfolio getPortfolioByProviderPortfolioId() {
		return this.portfolioByProviderPortfolioId;
	}

	public void setPortfolioByProviderPortfolioId(
			Portfolio portfolioByProviderPortfolioId) {
		this.portfolioByProviderPortfolioId = portfolioByProviderPortfolioId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "message_heads_id", nullable = false)
	public MessageHeads getMessageHeads() {
		return this.messageHeads;
	}

	public void setMessageHeads(MessageHeads messageHeads) {
		this.messageHeads = messageHeads;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "provider_users_id", referencedColumnName = "users_id", nullable = false),
			@JoinColumn(name = "provider_username", referencedColumnName = "username", nullable = false) })
	public Users getUsersByFkJobDetailsUsers2() {
		return this.usersByFkJobDetailsUsers2;
	}

	public void setUsersByFkJobDetailsUsers2(Users usersByFkJobDetailsUsers2) {
		this.usersByFkJobDetailsUsers2 = usersByFkJobDetailsUsers2;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "requestee_portfolio_id", nullable = false)
	public Portfolio getPortfolioByRequesteePortfolioId() {
		return this.portfolioByRequesteePortfolioId;
	}

	public void setPortfolioByRequesteePortfolioId(
			Portfolio portfolioByRequesteePortfolioId) {
		this.portfolioByRequesteePortfolioId = portfolioByRequesteePortfolioId;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "starting_date", nullable = false, length = 10)
	public Date getStartingDate() {
		return this.startingDate;
	}

	public void setStartingDate(Date startingDate) {
		this.startingDate = startingDate;
	}

	@Temporal(TemporalType.TIME)
	@Column(name = "starting_time", nullable = false, length = 8)
	public Date getStartingTime() {
		return this.startingTime;
	}

	public void setStartingTime(Date startingTime) {
		this.startingTime = startingTime;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "ending_date", nullable = false, length = 10)
	public Date getEndingDate() {
		return this.endingDate;
	}

	public void setEndingDate(Date endingDate) {
		this.endingDate = endingDate;
	}

	@Temporal(TemporalType.TIME)
	@Column(name = "ending_time", nullable = false, length = 8)
	public Date getEndingTime() {
		return this.endingTime;
	}

	public void setEndingTime(Date endingTime) {
		this.endingTime = endingTime;
	}

	@Column(name = "rate", nullable = false)
	public double getRate() {
		return this.rate;
	}

	public void setRate(double rate) {
		this.rate = rate;
	}

	@Column(name = "cancelled", nullable = false)
	public int getCancelled() {
		return this.cancelled;
	}

	public void setCancelled(int cancelled) {
		this.cancelled = cancelled;
	}

	@Column(name = "blocked", nullable = false)
	public int getBlocked() {
		return this.blocked;
	}

	public void setBlocked(int blocked) {
		this.blocked = blocked;
	}

	@Column(name = "issues", nullable = false)
	public int getIssues() {
		return this.issues;
	}

	public void setIssues(int issues) {
		this.issues = issues;
	}

	@Column(name = "payment_cleared", nullable = false)
	public int getPaymentCleared() {
		return this.paymentCleared;
	}

	public void setPaymentCleared(int paymentCleared) {
		this.paymentCleared = paymentCleared;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "jobDetails")
	public Set<Tips> getTipses() {
		return this.tipses;
	}

	public void setTipses(Set<Tips> tipses) {
		this.tipses = tipses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "jobDetails")
	public Set<Payment> getPayments() {
		return this.payments;
	}

	public void setPayments(Set<Payment> payments) {
		this.payments = payments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "jobDetails")
	public Set<Donations> getDonationses() {
		return this.donationses;
	}

	public void setDonationses(Set<Donations> donationses) {
		this.donationses = donationses;
	}

	@Column(name = "active", nullable = false)
	public int getActive() {
		return active;
	}

	public void setActive(int active) {
		this.active = active;
	}

	@Column(name = "orders", nullable = false)
	public int getOrders() {
		return orders;
	}

	public void setOrders(int orders) {
		this.orders = orders;
	}

	@Column(name = "total_amount", nullable = false)
	public Long getTotalAmount() {
		return totalAmount;
	}

	public void setTotalAmount(Long totalAmount) {
		this.totalAmount = totalAmount;
	}

}
